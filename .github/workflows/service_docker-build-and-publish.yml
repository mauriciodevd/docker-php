on:
  workflow_call:
    inputs:
      tag-prefix:
        required: true
        type: string
        description: 'The prefix to use for the Docker image tags.'
      php-versions-file:
        type: string
        default: 'scripts/conf/php-versions.yml'
        description: 'The path to the PHP versions file.'
      default-image-variation:
        type: string
        default: 'cli'
        description: 'The default PHP variation to use for the Docker image.'
      registry-repositories:
        type: string
        required: true
        description: 'The Docker registry repositories to push the images to. Separate multiple repositories with a comma (example: docker.io/serversideup/php,ghcr.io/serversideup/php)'
      release-type:
        type: string
        default: 'testing'
        description: 'The type of release to create. Options: testing, latest'

jobs:
  setup-matrix:
    runs-on: self-hosted
    outputs:
      php-version-map-json: ${{ steps.get-php-versions.outputs.php-version-map-json }}
    steps:
    - name: Check out code
      uses: actions/checkout@v4
    
    - name: Prepare PHP versions for the matrix. ðŸ˜Ž
      run: |
        chmod +x ./scripts/get-php-versions.sh
        ./scripts/get-php-versions.sh
    
    - name: Ensure our PHP Versions file exists.
      run: |
        if [ ! -f "${{ inputs.php-versions-file }}" ]; then
          echo "PHP Versions file does not exist. Exiting."
          exit 1
        else
          cat ${{ inputs.php-versions-file }}
        fi

    - name: Assemble PHP versions into the matrix. ðŸ˜Ž
      id: get-php-versions
      run: |
        MATRIX_JSON=$(yq -o=json scripts/conf/php-versions.yml | jq -c '{include: [(.php_variations[] | {name, supported_os: (.supported_os // ["alpine", "bullseye", "bookworm"])} ) as $variation | .php_versions[] | .minor_versions[] | .patch_versions[] as $patch | .base_os[] as $os | select($variation.supported_os | if length == 0 then . else . | index($os.name) end) | {patch_version: $patch, base_os: $os.name, php_variation: $variation.name}]}')
        echo "php-version-map-json=${MATRIX_JSON}" >> $GITHUB_OUTPUT
        echo "${MATRIX_JSON}" | jq '.'
  
    - name: Upload the php-versions.yml file
      uses: actions/upload-artifact@v4
      with:
        name: php-versions.yml
        path: ${{ inputs.php-versions-file }}
